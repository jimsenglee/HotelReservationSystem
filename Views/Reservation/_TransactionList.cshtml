@model IEnumerable<HotelRoomReservationSystem.Models.ViewModels.TransactionForProfileVM>
<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: #fff;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        width: 90%;
        max-width: 400px;
        position: relative;
    }

    .close {
        position: absolute;
        right: 1.5rem;
        top: 1rem;
        font-size: 1.5rem;
        cursor: pointer;
        color: #666;
        transition: color 0.3s ease;
    }

        .close:hover {
            color: #333;
        }

    h2 {
        color: #333;
        margin: 0 0 1.5rem 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    #extendReservationForm {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    label {
        color: #555;
        font-size: 0.9rem;
        margin-bottom: 0.25rem;
    }

    input[type="date"] {
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 1rem;
        outline: none;
        transition: border-color 0.3s ease;
    }

        input[type="date"]:focus {
            border-color: #4A90E2;
            box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.1);
        }

</style>
<div class="reservation-list scrollable">

    @if (Model != null && Model.Any())
    {
        <p>Total transactions displayed: @Model.Count()</p>
    }
    else
    {
        <p>No transactions found.</p>
    }

    @foreach (var transaction in Model)
    {
        <div class="reservation-card">
            <img src="/images/RoomType/@transaction.RoomTypeImage" alt="Room Image">
            <div class="reservation-details">
                <h4>@transaction.Transaction.Reservation.Room.RoomType.Name</h4>
                <p>Check-in: @transaction.Transaction.Reservation.CheckInDate.ToShortDateString()</p>
                <p>Check-out: @transaction.Transaction.Reservation.CheckOutDate.ToShortDateString()</p>
                <p>Price: RM @transaction.Transaction.Amount.ToString("N2")</p>
            </div>
            <div class="status @(transaction.Transaction.Status.ToLower())">
                @transaction.Transaction.Status
            </div>
            <div class="actions">
                @if (transaction.Transaction.Status == "Pending")
                {
                    <button class="btn cancel-btn" onclick="cancelReservation('@transaction.Transaction.Id')">Cancel</button>
                    <button class="btn pay-btn" onclick="payForReservation('@transaction.Transaction.Id')">Pay</button>
                    <button class="btn extend-btn" onclick="openExtendReservationModal('@transaction.Transaction.Reservation.Id', '@transaction.Transaction.Reservation.CheckOutDate')">Extend</button>
                }
                else if (transaction.Transaction.Status == "completed")
                {
                    <div style="display:flex; gap: 1rem;">
                        <div class="actions">
                            <div style="display:flex;" class="icon-container" onclick="location.href='@Url.Action("DownloadInvoice", "Reservation", new { transactionId = transaction.Transaction.Id })'">
                                <div class="icon">📁</div>
                                <div class="hover-text">Download Invoice</div>
                            </div>
                        </div>

                        <div>
                            @if (!transaction.IsRated) // If the transaction is not rated
                            {
                                <button class="icon-container" id="feedback-btn" onclick="openFeedbackModal('@transaction.Transaction.Reservation.Id')">Rate</button>
                            }
                            else // If the transaction is rated
                            {
                                <button class="icon-container" id="feedback-btn" onclick="updateFeedbackModal('@transaction.Transaction.Reservation.Id')">Review</button>
                            }
                        </div>
                    </div>
                }
                else if (transaction.Transaction.Status == "Canceled")
                {
                }
            </div>
        </div>
    }
</div>

<!-- Modal for Extend Reservation -->
<div id="extendReservationModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeExtendReservationModal()">&times;</span>
        <h2>Extend Reservation</h2>
        <form id="extendReservationForm">
            <input type="hidden" id="reservationId" />
            <label for="newCheckOutDate">New Check-Out Date:</label>
            <input type="date" id="newCheckOutDate" required />
            <p id="validationMessage" style="color: red; font-size: 0.9rem;"></p>
            <button type="submit" class="btn extend-btn">Confirm</button>
        </form>
    </div>
</div>

<script>
    function openExtendReservationModal(reservationId, currentCheckOutDate) {
        const newCheckOutDateInput = document.getElementById('newCheckOutDate');
        const validationMessage = document.getElementById('validationMessage');

        // Prefill the modal with the current check-out date
        document.getElementById('reservationId').value = reservationId;
        newCheckOutDateInput.value = currentCheckOutDate;
        validationMessage.textContent = '';

        // Set date restrictions
        const minDate = new Date(currentCheckOutDate);
        minDate.setDate(minDate.getDate() + 1);
        newCheckOutDateInput.min = minDate.toISOString().split('T')[0];

        const today = new Date();
        const maxDate = new Date(today);
        maxDate.setDate(today.getDate() + 90);
        newCheckOutDateInput.max = maxDate.toISOString().split('T')[0];

        // Show the modal
        document.getElementById('extendReservationModal').style.display = 'flex';

        // Attach onchange event for validation
        newCheckOutDateInput.onchange = function () {
            validateExtendReservationDate(reservationId, newCheckOutDateInput.value);
        };
    }

    function closeExtendReservationModal() {
        document.getElementById('extendReservationModal').style.display = 'none';
    }

    function validateExtendReservationDate(reservationId, newCheckOutDate) {
        const validationMessage = document.getElementById('validationMessage');

        if (!newCheckOutDate) {
            validationMessage.textContent = 'Please select a valid date.';
            return;
        }

        $.ajax({
            url: '/Reservation/ValidateExtendReservationDate',
            type: 'POST',
            data: { reservationId: reservationId, newCheckOutDate: newCheckOutDate },
            success: function (response) {
                if (response.isValid) {
                    validationMessage.style.color = 'green';
                    validationMessage.textContent = response.message;
                } else {
                    validationMessage.style.color = 'red';
                    validationMessage.textContent = response.message;
                }
            },
            error: function () {
                validationMessage.style.color = 'red';
                validationMessage.textContent = 'Error validating the date. Please try again later.';
            }
        });
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        var modal = document.getElementById('extendReservationModal');
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    }

    document.getElementById('extendReservationForm').addEventListener('submit', function (e) {
        e.preventDefault();

        const reservationId = document.getElementById('reservationId').value;
        const newCheckOutDate = document.getElementById('newCheckOutDate').value;

        if (!newCheckOutDate) {
            alert('Please select a valid date.');
            return;
        }

        $.ajax({
            url: '/Reservation/ExtendReservation',
            type: 'POST',
            data: { reservationId: reservationId, newCheckOutDate: newCheckOutDate },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    window.location.href = response.redirectUrl; // Redirect to Payment page
                } else {
                    alert(response.message);
                    if (response.alternatives) {
                        console.log('Alternative Dates:', response.alternatives);
                    }
                }
            },
            error: function () {
                alert('Failed to extend reservation. Please try again later.');
            }
        });
    });
</script>
