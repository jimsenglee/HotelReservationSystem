@using HotelRoomReservationSystem.Models.ViewModels;
@using X.PagedList.Mvc.Core
@using X.PagedList
@model IPagedList<RoomDetailsVM>
@{
    ViewBag.Title = "Top Top Hotel Admin";
}

@section head {
    <style>
        .details-card {
            position: absolute;
            display: none;
            width: 350px;
            background: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            padding: 20px;
        }

            .details-card.visible {
                display: block;
            }

            .details-card .card-content {
                display: flex;
                flex-direction: column;
                gap: 10px;
            }

            .details-card input,
            .details-card button {
                width: 100%;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
                margin-bottom: 10px;
            }

                .details-card button.submit-button {
                    background-color: #007bff;
                    color: #fff;
                    border: none;
                    cursor: pointer;
                }

                    .details-card button.submit-button:hover {
                        background-color: #0056b3;
                    }

        /* Container to position the select box */
        #custom-container {
            width: 18rem;
            position: relative;
        }

        /* Styling the select element */
        .custom-select {
            width: 100%;
            padding: 10px 15px;
            border-radius: 5px;
            background-color: #fff;
            color: #333;
            font-size: 16px;
            appearance: none; /* Remove default dropdown arrow */
            outline: none;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

            /* Hover and focus effects */
            .custom-select:hover,
            .custom-select:focus {
                border-color: var(--color-primary-6);
                box-shadow: 0 4px 10px rgba(29, 95, 105, 0.3);
                transform: scale(1.05);
            }

        /* Adding a custom dropdown arrow */
        #custom-container::after {
            content: '▼';
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            pointer-events: none; /* Prevent arrow from being clicked */
            font-size: 14px;
            color: var(--color-primary-6);
            transition: all 0.3s ease;
        }

        /* Change the arrow color on hover */
        #custom-container:hover::after {
            color: var(--color-primary-6);
        }

        /*  .undo-notification {
                                position: fixed;
                                bottom: 10px;
                                right: 10px;
                                background-color: #f8d7da;
                                color: #721c24;
                                padding: 10px;
                                border: 1px solid #f5c6cb;
                                border-radius: 5px;
                                z-index: 1000;
                                display: flex;
                                flex-direction: column;
                                gap: 5px;
                                width: auto;
                                box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
                            }

                                .undo-notification .undo-button {
                                    background-color: #f5c6cb;
                                    border: none;
                                    color: #721c24;
                                    cursor: pointer;
                                    padding: 5px 10px;
                                    border-radius: 3px;
                                    align-self: flex-start;
                                }

                            .progress-bar-container {
                                position: relative;
                                background-color: #f5c6cb;
                                border-radius: 3px;
                                overflow: hidden;
                                height: 5px;
                                width: 100%;
                            }

                            .progress-bar {
                                background-color: #721c24;
                                height: 100%;
                                width: 0%;
                                transition: width 1.2s linear;
                            } */


        .undo-notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #f4f4f4;
            border: 1px solid #ccc;
            padding: 10px 20px;
            border-radius: 5px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .undo-button {
            background: #007bff;
            color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
        }

        .progress-bar-container {
            position: relative;
            height: 5px;
            background: #ddd;
            flex-grow: 1;
            margin-left: 10px;
            border-radius: 5px;
            overflow: hidden;
        }

        .progress-bar {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            background: #007bff;
            animation: progress-bar-animation 5s linear forwards;
        }
    </style>

    <script>
        // function initializeHandlers(){
            $(document).ready(function () {
        //           $(document).on('click', '.status-btn', function () {
        //     const button = $(this);
        //     const row = button.closest('tr'); // Find the corresponding row
        //     const roomId = row.data('roomid'); // Get the roomId from the data attribute

        //     // Define the color cycle and the corresponding text
        //     const statusCycle = [
        //         { color: '#28a745', text: 'Available' },  // Green for Available
        //         { color: '#dc3545', text: 'Unavailable' },   // Red for Unavailable
        //         { color: '#6c757d', text: 'Maintenance' } // Gray for Maintenance
        //     ];

        //     // Get the current background color of the button
        //     const currentColor = button.css('background-color');
        //     const currentIndex = statusCycle.findIndex(status => status.color === rgbToHex(currentColor));

        //     if (currentIndex === -1) {
        //         console.error('Current color not found in the status cycle.');
        //         return;
        //     }

        //     // Calculate the next index in the cycle
        //     const nextIndex = (currentIndex + 1) % statusCycle.length;

        //     // Update the button's color and text
        //     const newStatus = statusCycle[nextIndex];
        //     button.css({
        //         'background-color': newStatus.color,
        //         'color': 'white'
        //     }).text(newStatus.text);

        //     // Send the updated status to the server via AJAX
        //     $.ajax({
        //         url: '/Rooms/UpdateStatus', // Adjust this URL based on your route configuration
        //         type: 'POST',
        //         contentType: 'application/json',
        //         data: JSON.stringify({
        //             id: roomId,
        //             status: newStatus.text
        //         }),
        //         success: function (response) {
        //             if (response.success) {
        //                 console.log('Status updated successfully.');
        //             } else {
        //                 alert('Failed to update status: ' + response.message);
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             console.error('Error:', error);
        //             alert('An error occurred while updating the status.');
        //         }
        //     });
        // });

        // // Helper function to convert RGB to Hex for comparison
        // function rgbToHex(rgb) {
        //     const rgbArray = rgb.match(/\d+/g).map(Number);
        //     return (
        //         '#' +
        //         rgbArray
        //             .map(x => x.toString(16).padStart(2, '0'))
        //             .join('')
        //     );
        // }





              $('.create-btn').on('click', function(){
            window.location.href = "/RForm";
        });

            $(document).on("click", "th.sortable", function (e) {
            // Prevent infinite loop by checking if the event originated from the `a` tag
            if (e.target.tagName !== "A") {
                // Find the `a` tag inside the clicked `th` and trigger its native click event
                $(this).find("a#sort-link")[0].click();
            }
        });

        $(document).on("click", "tr.data-row", function (e) {
             if (!$(e.target).is("input[type='checkbox']") && !$(e.target).is(".status-btn")) {
            // Get the roomId from the clicked row
            const roomId = $(this).data("roomid");
            console.log(roomId);
            // Call the GetRoomDetails endpoint
            $.ajax({
                url: `/Rooms/getRoomDetails`, // API endpoint
                method: "GET",
                data: { roomId: roomId }, // Send roomId as query parameter
                success: function (response) {
                    // Check if room details are found
                    if (response) {
                        // Redirect to a new page with roomId as query parameter
                        window.location.href = `/Rooms/Details?roomId=${roomId}`;
                    } else {
                        alert("Room not found!");
                    }
                },
                error: function (xhr) {
                    console.error("Error fetching room details:", xhr.responseText);
                    alert("An error occurred while fetching room details.");
                }
            });
            }
        });

            // Handle the Select All checkbox click event
            $('#selectAll').on('change', function () {
                // Check the state of the "Select All" checkbox
                const isChecked = $(this).is(':checked');
                // Set all checkboxes with the same state
                $('.data-row .checkbox').prop('checked', isChecked);
            });

            // Handle individual checkbox clicks to update the "Select All" state
                $('.data-row .checkbox').on('change', function () {
            const allCheckboxes = $('.data-row .checkbox');
            const allChecked = allCheckboxes.length === allCheckboxes.filter(':checked').length;
            $('#selectAll').prop('checked', allChecked);
        });

        $('.trash-button').on('click', function () {
            // Get selected room IDs
            const selectedIds = $('.checkbox:checked').map(function () {
                return $(this).data('roomid');
            }).get();

            if (selectedIds.length === 0) {
                alert('No items selected for deletion.');
                return;
            }

        Swal.fire({
            title: 'Are you sure?',
            text: `${selectedIds.length} room(s) marked for deletion.`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete them!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                // Send the delete request
                $.ajax({
                    url: `RoomDelete?roomIds=${selectedIds.join(',')}`,
                    type: 'GET',
                    success: function (response) {
                        Swal.fire({
                            title: 'Marked for Deletion!',
                            text: response.message,
                            icon: 'info',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            // Show Undo Notification
                            const undoNotification = $(`
                                <div class="undo-notification">
                                    <span>${selectedIds.length} room(s) marked for deletion. Undo?</span>
                                    <button class="undo-button">Undo</button>
                                    <div class="progress-bar-container">
                                        <div class="progress-bar"></div>
                                    </div>
                                </div>
                            `);

                            $('body').append(undoNotification);

                            // Start progress bar animation
                            undoNotification.find('.progress-bar')
                                .css({ width: '100%' })
                                .animate({ width: '0%' }, 5000);

                            // Set a timeout to finalize deletion
                            const deleteTimeout = setTimeout(() => {
                                // Commit the transaction after 5 seconds
                                $.ajax({
                                    url: "Commit",
                                    type: 'GET',
                                    success: function () {
                                        console.log("Commit successful");
                                        undoNotification.remove();
                                        refreshList(); // Refresh the data
                                    },
                                    error: function () {
                                        Swal.fire({
                                            title: 'Error!',
                                            text: 'Failed to commit deletion.',
                                            icon: 'error',
                                            confirmButtonText: 'Try Again'
                                        });
                                    }
                                });
                            }, 5000);

                            // Handle Undo Button
                            undoNotification.find('.undo-button').on('click', function () {
                                clearTimeout(deleteTimeout); // Cancel the timeout
                                undoNotification.remove();  // Remove the notification

                                // Rollback the transaction
                                $.ajax({
                                    url: "Roll",
                                    type: 'GET',
                                    success: function () {
                                        Swal.fire({
                                            title: 'Undo Successful!',
                                            text: 'The deletion has been canceled.',
                                            icon: 'success',
                                            confirmButtonText: 'OK'
                                        });
                                        refreshList(); // Refresh the data
                                    },
                                    error: function () {
                                        Swal.fire({
                                            title: 'Error!',
                                            text: 'Failed to undo deletion.',
                                            icon: 'error',
                                            confirmButtonText: 'Try Again'
                                        });
                                    }
                                });
                            });
                        });
                    },
                    error: function (error) {
                        Swal.fire({
                            title: 'Error!',
                            text: error.responseJSON?.message || 'Failed to mark rooms for deletion.',
                            icon: 'error',
                            confirmButtonText: 'Try Again'
                        });
                    }
                });
            } else {
                Swal.fire({
                    title: 'Cancelled',
                    text: 'No rooms were deleted.',
                    icon: 'info',
                    confirmButtonText: 'OK'
                });
            }
        });


        });

        function commitTransaction() {
            $.ajax({
                url: "Commit", // Call the commit API
                type: 'GET',
                success: function (response) {
                    console.log("Commit successful");
                },
                error: function (error) {
                    console.log(error);
                }
            });
        }

        function getHiddenFormValues() {
            const sort = $('input[name="sort"]').val(); // Retrieve 'sort' value
            const dir = $('input[name="dir"]').val(); // Retrieve 'dir' value
            const page = $('input[name="page"]').val(); // Retrieve 'page' value
            const pageSize = $('input[name="pageSize"]').val(); // Retrieve 'pageSize' value
            const searchBar = $('input[name="searchBar"]').val(); // Retrieve 'searchBar' value

            return {
                sort: sort,
                dir: dir,
                page: page,
                pageSize: pageSize,
                searchBar: searchBar
            };
        }

        function refreshList() {
            const formValues = getHiddenFormValues(); // Get the hidden form values

            // Use the retrieved hidden form values to refresh the table
            $.ajax({
                url: `Index?searchBar=${formValues.searchBar}&sort=${formValues.sort}&dir=${formValues.dir}&page=${formValues.page}&pageSize=${formValues.pageSize}`,
                type: 'GET',
                success: function (html) {
                    // Replace the content with the updated list
                    $('#target').html(html); // Replace #roomTableContainer with your container ID
                },
                error: function () {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to reload room data.',
                        icon: 'error',
                        confirmButtonText: 'Try Again'
                    });
                }
            });
        }
        // Finalize the delete after timeout
        // function finalizeDelete(selectedIds) {

        //     $.ajax({
        //         url: `RoomDelete?roomIds=${selectedIds.join(',')}`, // Deletion URL
        //         type: 'GET',
        //         success: function (response) {
        //             console.log(response);
        //             console.log(selectedIds);
        //         },
        //         error: function (error) {
        //             Swal.fire({
        //                 title: 'Error!',
        //                 text: error.responseJSON?.message || 'An error occurred while deleting the rooms.',
        //                 icon: 'error',
        //                 confirmButtonText: 'Try Again'
        //             });
        //         }
        //     });
        // }

        // Cancel bulk actions
        $('#cancelActionBtn').on('click', function () {
            $('.checkbox').prop('checked', false); // Uncheck all checkboxes
            $('#bulkActions').addClass('hidden'); // Hide bulk actions bar
            $('#labelItemsSelected').text('0 items selected');
        });


        });

               function submitViaAjax(element) {
            $(element).closest("RForm").submit(); // Let unobtrusive AJAX handle the form submission
        }
    </script>

}

<div class="body-content flex flex-column">
    <main class="flex flex-column gap-3 grow">
        <section class="flex gap-2 items-center justify-between">
            <div id="bulkActions" class="bulk-actions hidden items-center" style="-webkit-user-select: none;-ms-user-select: none;user-select: none;">
                <i class="icon trash-button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
                         viewBox="0 0 256 256">
                        <path d="M216,48H176V40a24,24,0,0,0-24-24H104A24,24,0,0,0,80,40v8H40a8,8,0,0,0,0,16h8V208a16,16,0,0,0,16,16H192a16,16,0,0,0,16-16V64h8a8,8,0,0,0,0-16ZM96,40a8,8,0,0,1,8-8h48a8,8,0,0,1,8,8v8H96Zm96,168H64V64H192ZM112,104v64a8,8,0,0,1-16,0V104a8,8,0,0,1,16,0Zm48,0v64a8,8,0,0,1-16,0V104a8,8,0,0,1,16,0Z">
                        </path>
                    </svg>
                </i>
                <small id="labelItemsSelected">0 items selected</small>
                <i class="icon" id="cancelActionBtn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                         viewBox="0 0 256 256">
                        <path d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z">
                        </path>
                    </svg>
                </i>
            </div>

            <h1 id="title" class="leading-none">Rooms</h1>

            <!-- Search and Actions -->
            <div class="flex gap-1 items-center">
                <div style="display: flex; border: 1px solid #ccc; padding: 1%; align-items: center; justify-content: space-between;">
                    <!-- Loader Image -->
                    <img src="/images/loader.gif" id="loader"
                         style="display: none; position: absolute; width: 24px; height: 24px; z-index: 999;">



                    <form data-ajax="true"
                          data-ajax-update="#target"
                          data-ajax-loading="#loader"
                          id="searchForm" style="display: flex; align-items: center; flex-grow: 1; width: 100%;">


                        @Html.TextBox("searchBar", "", new { type = "search", autofocus = "", data_trim = "", @class = "search-bar", id = "searchBar", placeholder = "Search ID", style = "outline: none;" })

                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
                             viewBox="0 0 256 256" id="searchIcon">
                            <path d="M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z"></path>
                        </svg>

                    </form>
                </div>

                <!-- Optional button if needed -->
                <button class="button icon create-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="#fdfdfe"
                         viewBox="0 0 256 256">
                        <path d="M228,128a12,12,0,0,1-12,12H140v76a12,12,0,0,1-24,0V140H40a12,12,0,0,1,0-24h76V40a12,12,0,0,1,24,0v76h76A12,12,0,0,1,228,128Z"></path>
                    </svg>
                </button>
            </div>

        </section>

        <form data-ajax="true"
              data-ajax-update="#target"
              data-ajax-loading="#loader"
              id="searchForm">

            <div style="display:flex; gap:1rem;">
                <div style="display:flex;flex-direction:row;align-items:center;" id="custom-container">
                    <label for="pageSize" style="width:15rem;">Page Size:</label>


                    @Html.DropDownList("pageSize", new List<SelectListItem>
                    {
                    new SelectListItem { Text = "5", Value = "5" },
                    new SelectListItem { Text = "10", Value = "10" },
                    new SelectListItem { Text = "15", Value = "15" },
                    new SelectListItem { Text = "All", Value = "0" }
                    }, new { id = "pageSize", @class = "form-control custom-select", onchange = "$(this.form).submit();" })  <!-- Form submission via AJAX -->
                </div>
                <div style="display:flex;flex-direction:row;align-items:center;" id="custom-container">
                    <label for="status" style="width:15rem;">Status :</label>


                    @Html.DropDownList("status", new List<SelectListItem>
                    {
                    new SelectListItem { Text = "All", Value = "All" },
                    new SelectListItem { Text = "Available", Value = "Available" },
                    new SelectListItem { Text = "Unavailable", Value = "Unavailable" },
                    new SelectListItem { Text = "Disabled", Value = "Disabled" }
                    }, new { id = "status", @class = "form-control custom-select", onchange = "$(this.form).submit();" })
                </div>

                <div style="display:flex;flex-direction:row;align-items:center;" id="custom-container">
                    <label for="roomType" style="width:15rem;">Room Type:</label>


                    @Html.DropDownList("roomType",
                             new SelectList((IEnumerable<SelectListItem>)ViewBag.RoomTypes, "Value", "Text", "All"),
                             new { id = "roomType", @class = "form-control custom-select", onchange = "$(this.form).submit();" })
                </div>
            </div>
        </form>

        <section class="flex flex-column gap-2">


            <div id="target">
                <partial name="_RoomList">
            </div>
        </section>
    </main>
</div>


@section foot {
    <script>
        let timer = null;

        $('#searchBar').on('input', e => {
            clearTimeout(timer);
            timer = setTimeout(() => $(e.target.form).submit(), 800);
        });
    </script>
}
