@model HotelRoomReservationSystem.Models.ViewModels.RoomsAddVM

@section head {
    <style>
        .form-container {
            display: flex;
            gap: 20px;
        }

        .form-section {
            flex: 1;
            padding: 20px;
            gap: 1rem;
            display: flex;
            flex-direction: column;
            flex-wrap: nowrap;
            justify-content: center;
        }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
            }

            .form-group input,
            .form-group select,
            .form-group textarea {
                width: 100%;
                padding: 1rem;
                box-sizing: border-box;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

            .form-group textarea {
                resize: vertical;
            }

        .upload-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
            max-width: 500px;
            margin: auto;
            margin-bottom: 2rem;
        }

        .dropbox {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            width: 100%;
            max-width: 500px;
            position: relative;
            background-color: #f9f9f9;
            transition: background-color 0.3s;
        }

            .dropbox:hover {
                background-color: #f1f1f1;
            }

        .plus-icon {
            font-size: 36px;
            font-weight: bold;
            color: #666;
            margin-bottom: 10px;
        }

        button#selectImages {
            margin-top: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }

            button#selectImages:hover {
                background-color: #0056b3;
            }

        .preview-container {
            display: flex;
            flex-wrap: wrap;
            margin-top: 20px;
            gap: 10px;
            align-items: center;
            justify-content: center;
        }

            .preview-container img {
                width: 100px;
                height: 100px;
                object-fit: cover;
                border: 1px solid #ddd;
                border-radius: 5px;
            }

        /* Container styling for images */
        .image-container {
            position: relative;
            display: inline-block;
            margin: 10px;
        }

            /* Styling the image */
            .image-container img {
                width: 100px;
                height: 100px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

        /* Cancel button styling */
        .cancel-button {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: #ff4d4d;
            color: white;
            border: none;
            border-radius: 50%;
            font-size: 12px;
            width: 10px;
            height: 10px;
            padding: 1rem;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

            .cancel-button:hover {
                background-color: #ff1a1a;
            }

        .field-validation-error,
        .validation-summary-errors {
            color: red;
        }

        .input-validation-error {
            border: 2px solid red !important;
            outline: none;
        }
    </style>

    <script>
         $(document).ready(function () {
            $('input.input-validation-error').on('change', function () {
                $('span.field-validation-error').text("");
            });

                    const validateOnInput = ["#Name", "#Description", "#RoomTypeName"];
        const validateOnInputOrChange = ["#Price", "#RoomCapacity"];

                    // Trigger validation on keyup
        validateOnInput.forEach(selector => {
            $(selector).on("keyup", function () {
                $(this).valid();
            });
        });

        // Trigger validation on keyup or change
        validateOnInputOrChange.forEach(selector => {
            $(selector).on("keyup change", function () {
                $(this).valid();
            });
        });

        });

        document.addEventListener("DOMContentLoaded", () => {
            const dropbox = document.getElementById("dropbox");
            const fileInput = document.getElementById("Images");
            const previewContainer = document.getElementById("previewContainer");
            const selectImagesButton = document.getElementById("selectImages");
            // Handle drag-and-drop functionality
            dropbox.addEventListener("dragover", (e) => {
                e.preventDefault();
                dropbox.style.backgroundColor = "#e6e6e6";
            });

            dropbox.addEventListener("dragleave", () => {
                dropbox.style.backgroundColor = "#f9f9f9";
            });

            dropbox.addEventListener("drop", (e) => {
                e.preventDefault();
                dropbox.style.backgroundColor = "#f9f9f9";
                const files = Array.from(e.dataTransfer.files);
                handleFiles(files);
            });

            // Open file dialog when clicking the "Select Images" button
            selectImagesButton.addEventListener("click", () => {
                fileInput.click();
            });

            // Handle file selection through the input
            fileInput.addEventListener("change", (e) => {
                const files = Array.from(e.target.files);
                handleFiles(files);
                validateImages();
            });
            // Handle file validation and previews
            const handleFiles = (files) => {
                    const maxFiles = 5;
             const existingImages = previewContainer.querySelectorAll('.image-container');
                    if (existingImages.length + files.length > maxFiles) {
                        Swal.fire({
                            icon: "error",
                            title: "Limit Exceeded",
                            text: `You can upload a maximum of ${maxFiles} images.`,
                        });
                        return;
                    }

                files.forEach((file) => {
                    // Validate file type
                    if (!file.type.match("image.*")) {
                        Swal.fire({
                            icon: "error",
                            title: "Invalid File",
                            text: "Only image files are allowed.",
                        });
                        return;
                    }

                    // Validate FileReader support
                    if (!window.FileReader) {
                        console.error("FileReader is not supported in this browser.");
                        return;
                    }

                    // Check file size (2MB limit)
                    const maxFileSize = 2 * 1024 * 1024; // 2MB
                    if (file.size > maxFileSize) {
                        Swal.fire({
                            icon: "error",
                            title: "File Too Large",
                            text: `${file.name} must be less than 2 MB.`,
                        });
                        return;
                    }

                    const reader = new FileReader();

                    // FileReader event handlers
                    reader.onload = (e) => {

                        const imgContainer = document.createElement("div");
                        imgContainer.classList.add("image-container");

                        const img = document.createElement("img");
                        img.src = e.target.result;
                        imgContainer.appendChild(img);

                        // Create the cancel button
                        const cancelButton = document.createElement("button");
                        cancelButton.textContent = "✖";
                        cancelButton.classList.add("cancel-button");
                        cancelButton.addEventListener("click", () => {
                            imgContainer.remove();
                        });

                        cancelButton.addEventListener("click", () => {
                            // Add a fade-out transition
                            imgContainer.classList.add("fade-out");
                            setTimeout(() => {
                                imgContainer.remove();
                            }, 300); // Matches CSS transition duration
                        });
                        imgContainer.appendChild(cancelButton);
                        document.getElementById("previewContainer").appendChild(imgContainer);
                    };

                    reader.onerror = () => {
                        console.error("Error reading file:", reader.error);
                    };

                    // Start reading the file
                    reader.readAsDataURL(file);
                });
            };
            // Trim input

            $('[data-trim]').on('change', e => {
                e.target.value = e.target.value.trim();
            });

            // Auto uppercase
            $('[data-upper]').on('input', e => {
                const a = e.target.selectionStart;
                const b = e.target.selectionEnd;
                e.target.value = e.target.value.toUpperCase();
                e.target.setSelectionRange(a, b);
            });

            document.getElementById("submitBtn").addEventListener("click", function (event) {
                event.preventDefault(); // Prevent form submission

                 const isNameValid = $('#Name').valid();
            const isDescriptionValid = $('#Description').valid();
            const isPriceValid = $('#Price').valid();
            const isRoomCapacityValid = $('#RoomCapacity').valid();
            const isRoomNameValid = $('#RoomTypeName').valid();
            // Combine results into a single flag
            const isFormValid = isNameValid && isDescriptionValid &&
                isPriceValid &&
                isRoomCapacityValid && isRoomNameValid;

                if (validateImages()) {
                if (isFormValid) {
                    Swal.fire({
                        title: "Are you sure?",
                        text: "Do you want to submit the form?",
                        icon: "question",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, submit it!",
                        cancelButtonText: "No, cancel"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const form = document.querySelector("form");
                            const previewContainer = document.getElementById("previewContainer");
                            const images = previewContainer.getElementsByTagName("img");

                            const fileInput = document.getElementById("Images");
                            const fileList = new DataTransfer(); // Create a new DataTransfer object to manage files

                                priceInput.disabled = false;
                        roomCapacityInput.disabled = false;
                        descriptionInput.disabled = false;

                            // Convert base64 images in the preview container to files
                            Array.from(images).forEach((img, index) => {
                                fetch(img.src)
                                    .then(res => res.blob())
                                    .then(blob => {
                                        const file = new File([blob], `image_${index}.png`, { type: blob.type });
                                        fileList.items.add(file); // Add the file to the DataTransfer object
                                    })
                                    .catch((err) => {
                                        console.error("Error processing image:", err);
                                    });
                            });

                            // Wait for all images to be processed
                            setTimeout(() => {
                                fileInput.files = fileList.files; // Assign the files to the file input element
                                // const id = "update";
                                // Submit the form
                                form.submit();
                            }, 500);
                        }
                    });
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Invalid input.",
                        text: `Some fields are invalid.`,
                    });
                }
            } else{
                Swal.fire({
                        icon: "error",
                        title: "Invalid input.",
                        text: `Some fields are invalid.`,
                    });
            }
            });

        // After form submission, check the preview container for existing images
            function checkExistingPreviews() {
            const previewContainer = document.getElementById("previewContainer");
            const existingPreviews = document.querySelectorAll('input[name="ExistingPreviews"]');

            // Loop through existing previews (hidden inputs with URLs)
            existingPreviews.forEach((input) => {
                const previewUrl = input.value;

                // Find the corresponding image container inside previewContainer
                const imgContainer = document.querySelector(`div.image-container img[src="${previewUrl}"]`).parentNode;

                if (imgContainer) {
                    // Create the cancel button
                    const cancelButton = document.createElement("button");
                    cancelButton.textContent = "✖";
                    cancelButton.classList.add("cancel-button");

                    // Cancel button logic to remove the image container and hidden input
                    cancelButton.addEventListener("click", () => {
                        imgContainer.classList.add("fade-out");

                        // Remove the hidden input corresponding to the image
                        const hiddenInput = imgContainer.querySelector('input[name="ExistingPreviews"]');
                        if (hiddenInput) {
                            hiddenInput.remove(); // Remove the hidden input
                        }

                        setTimeout(() => {
                            imgContainer.remove(); // Remove the image container after fade-out
                        }, 300); // Matches CSS transition duration
                    });

                    imgContainer.appendChild(cancelButton); // Append the cancel button to the image container
                }
            });
        }



        // Call this function to check existing previews when the page loads or after form submission
        checkExistingPreviews();

            function validateImages() {
                const inputElement = document.getElementById("Images");
                const errMsg = document.getElementById("ImgErr");
                const maxFiles = 5; // Maximum allowed files
                const maxSize = 2 * 1024 * 1024; // Maximum file size (2 MB)
                const allowedTypes = ["image/jpeg", "image/png", "image/gif"]; // Allowed file types
                const files = inputElement.files;
                const previewContainer = document.getElementById("previewContainer");
                const imageContainers = previewContainer.getElementsByClassName("image-container");
                // Clear any previous error messages
                errMsg.innerHTML = "";

                // Check if no files are selected
                if (files.length === 0 && imageContainers.length === 0) {
                    errMsg.innerHTML = "Please select at least one image.";
                    return false;
                } else

                    // Check file count
                    if ((files.length > maxFiles) && imageContainers.length > maxFiles) {
                        errMsg.innerHTML = `You can upload a maximum of ${maxFiles} images.`;
                        return false;
                    } else {

                        // Validate each file
                        for (let i = 0; i < files.length; i++) {
                            const file = files[i];

                            // Check file type
                            if (!allowedTypes.includes(file.type)) {
                                errMsg.innerHTML = `File type not allowed: ${file.name}`;
                                return false;
                            }

                            // Check file size
                            if (file.size > maxSize) {
                                errMsg.innerHTML = `File size exceeds 2MB: ${file.name}`;
                                return false;
                            }
                        }
                    }

                return true;
            }

        const categoryInput = document.getElementById("RoomTypeName");
              const priceInput = document.getElementById("Price");
              const roomCapacityInput = document.getElementById("RoomCapacity");
              const descriptionInput = document.getElementById("Description");
              // categoryInput.addEventListener("input", function () {
              //     const enteredCategory = categoryInput.value.trim();
              //     const categoryOptions = Array.from(document.querySelectorAll("#categoryList option")).map(opt => opt.value);

              //     // if (categoryOptions.map(c => c.toLowerCase()).includes(enteredCategory.toLowerCase())) {
              //     fetch(`/Rooms/GetCategoryDetails?RoomTypeName=${encodeURIComponent(enteredCategory)}`)
              //         .then(response => response.json())
              //         .then(data => {
              //             if (data) {
              //                 // If category exists in the database, disable the fields
              //                 priceInput.value = data.price.toFixed(2);
              //                 roomCapacityInput.value = data.capacity;
              //                 descriptionInput.value = data.description;
              //                 priceInput.disabled = true;
              //                 roomCapacityInput.disabled = true;
              //                 descriptionInput.disabled = true;
              //                 $('#Price').valid();
              //                 $('#RoomCapacity').valid();
              //                 $('#Description').valid();
              //             } else {
              //                 // If category doesn't exist in the database, enable the fields
              //                 priceInput.value = "1.00";
              //                 roomCapacityInput.value = "1";
              //                 descriptionInput.value = "";
              //                 priceInput.disabled = false;
              //                 roomCapacityInput.disabled = false;
              //                 descriptionInput.disabled = false;
              //             }
              //         });
              // });
                      categoryInput.addEventListener("input", function () {
            const enteredCategory = categoryInput.value.trim();

            fetch(`/Rooms/GetCategoryDetails?RoomTypeName=${encodeURIComponent(enteredCategory)}`)
                .then(response => response.json())
                .then(data => {
                    if (data) {
                        // Populate text fields
                        priceInput.value = data.price.toFixed(2);
                        roomCapacityInput.value = data.capacity;
                        descriptionInput.value = data.description;
                        priceInput.disabled = true;
                        roomCapacityInput.disabled = true;
                        descriptionInput.disabled = true;

                        // Validate fields
                        $('#Price').valid();
                        $('#RoomCapacity').valid();
                        $('#Description').valid();

                        // Populate image previews
        const previewContainer = document.getElementById("previewContainer");
        previewContainer.innerHTML = ""; // Clear existing previews

        if (data.images && typeof data.images === "string") {
            // Split the string into an array
            const imagesArray = data.images.split(", ");

            dropbox.style.display = "none";
            imagesArray.forEach(image => {
                const imageContainer = document.createElement("div");
                imageContainer.classList.add("image-container");

                const imgElement = document.createElement("img");
                imgElement.src = "/images/RoomType/" +  image.trim(); // Set image path
                imgElement.alt = "Room Image";

                imageContainer.appendChild(imgElement);
                previewContainer.appendChild(imageContainer);
            });
        }
                    } else {
                        // Reset fields if category not found
                        priceInput.value = "1.00";
                        roomCapacityInput.value = "1";
                        descriptionInput.value = "";
                        priceInput.disabled = false;
                        roomCapacityInput.disabled = false;
                        descriptionInput.disabled = false;
                        dropbox.style.display = "block";
                        // Clear image previews
                        const previewContainer = document.getElementById("previewContainer");
                        previewContainer.innerHTML = "";
                    }
                });
        });

          });
    </script>
}

<div class="body-content flex flex-column">
    <main class="flex flex-column grow">
        <section class="flex flex-column gap-2">
            <form id="roomForm" class="form" asp-action="SubmitForm" asp-controller="Rooms" method="post" enctype="multipart/form-data">
                <div class="form-container">
                    <!-- Left Section -->
                    <div class="form-section">
                        <input asp-for="Id" style="display:none;"/> <!-- Hidden input to pass Id -->

                        <div class="form-group">
                            <label asp-for="Name"></label>
                            <input asp-for="Name" placeholder="Enter Name" data-trim  data-upper autocomplete="off"/>
                            <span asp-validation-for="Name"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Description"></label>
                            <textarea asp-for="Description" rows="4" placeholder="Enter Description..." style="resize:none" data-trim></textarea>
                            <span asp-validation-for="Description"></span>
                        </div>

                    </div>

                    <!-- Right Section -->
                    <div class="form-section">
                        <div class="form-group">
                            <label asp-for="RoomTypeName"></label>
                            <input list="categoryList" asp-for="RoomTypeName" placeholder="Enter Room Type" />
                            <datalist id="categoryList">
                                @foreach (var ctgName in ViewBag.CategoryList as List<string>)
                                {
                                    <option value="@ctgName"></option>
                                }
                            </datalist>
                            <span asp-validation-for="RoomTypeName"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="Price"></label>
                            <input asp-for="Price" placeholder="Enter Price" value="1.00" />
                            <span asp-validation-for="Price"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="RoomCapacity"></label>
                            <input asp-for="RoomCapacity" value="1" />
                            <span asp-validation-for="RoomCapacity" ></span>
                        </div>
                    </div>
                </div>
                <div class="upload-container">
                    <!-- Drag-and-Drop Area -->
                    <div id="dropbox" class="dropbox">
                        <span class="plus-icon">+</span>
                        <p>Drag & drop images here, or</p>
                        <button id="selectImages" type="button">Select Images</button>
                        <input asp-for="Images" name="Images" type="file" multiple accept=".jpg,.jpeg,.png" hidden>
                    </div>
                    <span id="ImgErr" class="text-danger" style="color:red;"></span>
                    <span asp-validation-for="Images"></span>
                    <!-- Image Preview Area -->
                    <div id="previewContainer" class="preview-container">
                        @if (Model != null)
                        {
                            @if (Model.ImagePreviews != null && Model.ImagePreviews.Any())
                            {
                                foreach (var preview in Model.ImagePreviews)
                                {
                                    <input type="hidden" name="ExistingPreviews" value="@preview" />
                                    <div class="image-container">
                                        <img src="@preview" alt="Preview" />
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
                <!-- Submit Button -->
                <div class="submit-btn" style="display:flex;flex-direction:row-reverse;">
                    <button id="submitBtn">Submit</button>
                </div>
            </form>
        </section>
    </main>
</div>